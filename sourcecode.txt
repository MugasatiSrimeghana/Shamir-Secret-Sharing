import java.io.FileReader;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

public class ShamirSecretSharing {
    public static class Point {
        int x;
        int y;
        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    public static int decodeValue(String value, int base) {
        return Integer.parseInt(value, base);
    }
    public static double lagrangeInterpolation(List<Point> points, int k) {
        double secret = 0.0;
        for (int i = 0; i < k; i++) {
            double term = points.get(i).y;
            for (int j = 0; j < k; j++) {
                if (i != j) {
                    term *= (0 - points.get(j).x) / (double)(points.get(i).x - points.get(j).x);
                }
            }
            secret += term;
        }
        return secret;
    }
    public static void main(String[] args) {
        JSONParser parser = new JSONParser();
        try {
            JSONObject jsonObject = (JSONObject) parser.parse(new FileReader("input.json"));
            JSONObject keys = (JSONObject) jsonObject.get("keys");
            int n = ((Long) keys.get("n")).intValue();
            int k = ((Long) keys.get("k")).intValue();

            List<Point> points = new ArrayList<>();
            for (int i = 1; i <= n; i++) {
                JSONObject pointObj = (JSONObject) jsonObject.get(String.valueOf(i));
                int base = Integer.parseInt((String) pointObj.get("base"));
                String value = (String) pointObj.get("value");
                int x = i;
                int y = decodeValue(value, base);
                points.add(new Point(x, y));
            }
            double secret = lagrangeInterpolation(points, k);
            System.out.println("The secret (constant term c) is: " + secret);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
